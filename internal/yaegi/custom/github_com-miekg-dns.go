// Code generated by 'yaegi extract github.com/miekg/dns'. DO NOT EDIT.

package custom

import (
	"crypto/tls"
	"github.com/miekg/dns"
	"go/constant"
	"go/token"
	"net"
	"reflect"
	"time"
)

func init() {
	Symbols["github.com/miekg/dns/dns"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AMTRELAYHost":                          reflect.ValueOf(dns.AMTRELAYHost),
		"AMTRELAYIPv4":                          reflect.ValueOf(dns.AMTRELAYIPv4),
		"AMTRELAYIPv6":                          reflect.ValueOf(dns.AMTRELAYIPv6),
		"AMTRELAYNone":                          reflect.ValueOf(dns.AMTRELAYNone),
		"ActivateAndServe":                      reflect.ValueOf(dns.ActivateAndServe),
		"AlgorithmToHash":                       reflect.ValueOf(&dns.AlgorithmToHash).Elem(),
		"AlgorithmToString":                     reflect.ValueOf(&dns.AlgorithmToString).Elem(),
		"CanonicalName":                         reflect.ValueOf(dns.CanonicalName),
		"CertACPKIX":                            reflect.ValueOf(constant.MakeFromLiteral("7", token.INT, 0)),
		"CertIACPKIX":                           reflect.ValueOf(constant.MakeFromLiteral("8", token.INT, 0)),
		"CertIPGP":                              reflect.ValueOf(constant.MakeFromLiteral("6", token.INT, 0)),
		"CertIPIX":                              reflect.ValueOf(constant.MakeFromLiteral("4", token.INT, 0)),
		"CertISPKI":                             reflect.ValueOf(constant.MakeFromLiteral("5", token.INT, 0)),
		"CertOID":                               reflect.ValueOf(constant.MakeFromLiteral("254", token.INT, 0)),
		"CertPGP":                               reflect.ValueOf(constant.MakeFromLiteral("3", token.INT, 0)),
		"CertPKIX":                              reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"CertSPKI":                              reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"CertTypeToString":                      reflect.ValueOf(&dns.CertTypeToString).Elem(),
		"CertURI":                               reflect.ValueOf(constant.MakeFromLiteral("253", token.INT, 0)),
		"CertificateToDANE":                     reflect.ValueOf(dns.CertificateToDANE),
		"ClassANY":                              reflect.ValueOf(constant.MakeFromLiteral("255", token.INT, 0)),
		"ClassCHAOS":                            reflect.ValueOf(constant.MakeFromLiteral("3", token.INT, 0)),
		"ClassCSNET":                            reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"ClassHESIOD":                           reflect.ValueOf(constant.MakeFromLiteral("4", token.INT, 0)),
		"ClassINET":                             reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"ClassNONE":                             reflect.ValueOf(constant.MakeFromLiteral("254", token.INT, 0)),
		"ClassToString":                         reflect.ValueOf(&dns.ClassToString).Elem(),
		"ClientConfigFromFile":                  reflect.ValueOf(dns.ClientConfigFromFile),
		"ClientConfigFromReader":                reflect.ValueOf(dns.ClientConfigFromReader),
		"CompareDomainName":                     reflect.ValueOf(dns.CompareDomainName),
		"Copy":                                  reflect.ValueOf(dns.Copy),
		"CountLabel":                            reflect.ValueOf(dns.CountLabel),
		"DH":                                    reflect.ValueOf(dns.DH),
		"DSA":                                   reflect.ValueOf(dns.DSA),
		"DSANSEC3SHA1":                          reflect.ValueOf(dns.DSANSEC3SHA1),
		"Dedup":                                 reflect.ValueOf(dns.Dedup),
		"DefaultMsgAcceptFunc":                  reflect.ValueOf(&dns.DefaultMsgAcceptFunc).Elem(),
		"DefaultMsgSize":                        reflect.ValueOf(constant.MakeFromLiteral("4096", token.INT, 0)),
		"DefaultServeMux":                       reflect.ValueOf(&dns.DefaultServeMux).Elem(),
		"Dial":                                  reflect.ValueOf(dns.Dial),
		"DialTimeout":                           reflect.ValueOf(dns.DialTimeout),
		"DialTimeoutWithTLS":                    reflect.ValueOf(dns.DialTimeoutWithTLS),
		"DialWithTLS":                           reflect.ValueOf(dns.DialWithTLS),
		"ECCGOST":                               reflect.ValueOf(dns.ECCGOST),
		"ECDSAP256SHA256":                       reflect.ValueOf(dns.ECDSAP256SHA256),
		"ECDSAP384SHA384":                       reflect.ValueOf(dns.ECDSAP384SHA384),
		"ED25519":                               reflect.ValueOf(dns.ED25519),
		"ED448":                                 reflect.ValueOf(dns.ED448),
		"EDNS0COOKIE":                           reflect.ValueOf(constant.MakeFromLiteral("10", token.INT, 0)),
		"EDNS0DAU":                              reflect.ValueOf(constant.MakeFromLiteral("5", token.INT, 0)),
		"EDNS0DHU":                              reflect.ValueOf(constant.MakeFromLiteral("6", token.INT, 0)),
		"EDNS0EDE":                              reflect.ValueOf(constant.MakeFromLiteral("15", token.INT, 0)),
		"EDNS0ESU":                              reflect.ValueOf(constant.MakeFromLiteral("4", token.INT, 0)),
		"EDNS0EXPIRE":                           reflect.ValueOf(constant.MakeFromLiteral("9", token.INT, 0)),
		"EDNS0LLQ":                              reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"EDNS0LOCALEND":                         reflect.ValueOf(constant.MakeFromLiteral("65534", token.INT, 0)),
		"EDNS0LOCALSTART":                       reflect.ValueOf(constant.MakeFromLiteral("65001", token.INT, 0)),
		"EDNS0N3U":                              reflect.ValueOf(constant.MakeFromLiteral("7", token.INT, 0)),
		"EDNS0NSID":                             reflect.ValueOf(constant.MakeFromLiteral("3", token.INT, 0)),
		"EDNS0PADDING":                          reflect.ValueOf(constant.MakeFromLiteral("12", token.INT, 0)),
		"EDNS0SUBNET":                           reflect.ValueOf(constant.MakeFromLiteral("8", token.INT, 0)),
		"EDNS0TCPKEEPALIVE":                     reflect.ValueOf(constant.MakeFromLiteral("11", token.INT, 0)),
		"EDNS0UL":                               reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"ErrAlg":                                reflect.ValueOf(&dns.ErrAlg).Elem(),
		"ErrAuth":                               reflect.ValueOf(&dns.ErrAuth).Elem(),
		"ErrBuf":                                reflect.ValueOf(&dns.ErrBuf).Elem(),
		"ErrConnEmpty":                          reflect.ValueOf(&dns.ErrConnEmpty).Elem(),
		"ErrExtendedRcode":                      reflect.ValueOf(&dns.ErrExtendedRcode).Elem(),
		"ErrFqdn":                               reflect.ValueOf(&dns.ErrFqdn).Elem(),
		"ErrId":                                 reflect.ValueOf(&dns.ErrId).Elem(),
		"ErrKey":                                reflect.ValueOf(&dns.ErrKey).Elem(),
		"ErrKeyAlg":                             reflect.ValueOf(&dns.ErrKeyAlg).Elem(),
		"ErrKeySize":                            reflect.ValueOf(&dns.ErrKeySize).Elem(),
		"ErrLongDomain":                         reflect.ValueOf(&dns.ErrLongDomain).Elem(),
		"ErrNoSig":                              reflect.ValueOf(&dns.ErrNoSig).Elem(),
		"ErrPrivKey":                            reflect.ValueOf(&dns.ErrPrivKey).Elem(),
		"ErrRRset":                              reflect.ValueOf(&dns.ErrRRset).Elem(),
		"ErrRcode":                              reflect.ValueOf(&dns.ErrRcode).Elem(),
		"ErrRdata":                              reflect.ValueOf(&dns.ErrRdata).Elem(),
		"ErrSecret":                             reflect.ValueOf(&dns.ErrSecret).Elem(),
		"ErrShortRead":                          reflect.ValueOf(&dns.ErrShortRead).Elem(),
		"ErrSig":                                reflect.ValueOf(&dns.ErrSig).Elem(),
		"ErrSoa":                                reflect.ValueOf(&dns.ErrSoa).Elem(),
		"ErrTime":                               reflect.ValueOf(&dns.ErrTime).Elem(),
		"Exchange":                              reflect.ValueOf(dns.Exchange),
		"ExchangeConn":                          reflect.ValueOf(dns.ExchangeConn),
		"ExchangeContext":                       reflect.ValueOf(dns.ExchangeContext),
		"ExtendedErrorCodeBlocked":              reflect.ValueOf(dns.ExtendedErrorCodeBlocked),
		"ExtendedErrorCodeCachedError":          reflect.ValueOf(dns.ExtendedErrorCodeCachedError),
		"ExtendedErrorCodeCensored":             reflect.ValueOf(dns.ExtendedErrorCodeCensored),
		"ExtendedErrorCodeDNSBogus":             reflect.ValueOf(dns.ExtendedErrorCodeDNSBogus),
		"ExtendedErrorCodeDNSKEYMissing":        reflect.ValueOf(dns.ExtendedErrorCodeDNSKEYMissing),
		"ExtendedErrorCodeDNSSECIndeterminate":  reflect.ValueOf(dns.ExtendedErrorCodeDNSSECIndeterminate),
		"ExtendedErrorCodeFiltered":             reflect.ValueOf(dns.ExtendedErrorCodeFiltered),
		"ExtendedErrorCodeForgedAnswer":         reflect.ValueOf(dns.ExtendedErrorCodeForgedAnswer),
		"ExtendedErrorCodeInvalidData":          reflect.ValueOf(dns.ExtendedErrorCodeInvalidData),
		"ExtendedErrorCodeNSECMissing":          reflect.ValueOf(dns.ExtendedErrorCodeNSECMissing),
		"ExtendedErrorCodeNetworkError":         reflect.ValueOf(dns.ExtendedErrorCodeNetworkError),
		"ExtendedErrorCodeNoReachableAuthority": reflect.ValueOf(dns.ExtendedErrorCodeNoReachableAuthority),
		"ExtendedErrorCodeNoZoneKeyBitSet":      reflect.ValueOf(dns.ExtendedErrorCodeNoZoneKeyBitSet),
		"ExtendedErrorCodeNotAuthoritative":     reflect.ValueOf(dns.ExtendedErrorCodeNotAuthoritative),
		"ExtendedErrorCodeNotReady":             reflect.ValueOf(dns.ExtendedErrorCodeNotReady),
		"ExtendedErrorCodeNotSupported":         reflect.ValueOf(dns.ExtendedErrorCodeNotSupported),
		"ExtendedErrorCodeOther":                reflect.ValueOf(dns.ExtendedErrorCodeOther),
		"ExtendedErrorCodeProhibited":           reflect.ValueOf(dns.ExtendedErrorCodeProhibited),
		"ExtendedErrorCodeRRSIGsMissing":        reflect.ValueOf(dns.ExtendedErrorCodeRRSIGsMissing),
		"ExtendedErrorCodeSignatureExpired":     reflect.ValueOf(dns.ExtendedErrorCodeSignatureExpired),
		"ExtendedErrorCodeSignatureNotYetValid": reflect.ValueOf(dns.ExtendedErrorCodeSignatureNotYetValid),
		"ExtendedErrorCodeStaleAnswer":          reflect.ValueOf(dns.ExtendedErrorCodeStaleAnswer),
		"ExtendedErrorCodeStaleNXDOMAINAnswer":  reflect.ValueOf(dns.ExtendedErrorCodeStaleNXDOMAINAnswer),
		"ExtendedErrorCodeToString":             reflect.ValueOf(&dns.ExtendedErrorCodeToString).Elem(),
		"ExtendedErrorCodeUnsupportedDNSKEYAlgorithm": reflect.ValueOf(dns.ExtendedErrorCodeUnsupportedDNSKEYAlgorithm),
		"ExtendedErrorCodeUnsupportedDSDigestType":    reflect.ValueOf(dns.ExtendedErrorCodeUnsupportedDSDigestType),
		"Field":                     reflect.ValueOf(dns.Field),
		"Fqdn":                      reflect.ValueOf(dns.Fqdn),
		"GOST94":                    reflect.ValueOf(dns.GOST94),
		"Handle":                    reflect.ValueOf(dns.Handle),
		"HandleFailed":              reflect.ValueOf(dns.HandleFailed),
		"HandleFunc":                reflect.ValueOf(dns.HandleFunc),
		"HandleRemove":              reflect.ValueOf(dns.HandleRemove),
		"HashName":                  reflect.ValueOf(dns.HashName),
		"HashToString":              reflect.ValueOf(&dns.HashToString).Elem(),
		"HmacMD5":                   reflect.ValueOf(constant.MakeFromLiteral("\"hmac-md5.sig-alg.reg.int.\"", token.STRING, 0)),
		"HmacSHA1":                  reflect.ValueOf(constant.MakeFromLiteral("\"hmac-sha1.\"", token.STRING, 0)),
		"HmacSHA224":                reflect.ValueOf(constant.MakeFromLiteral("\"hmac-sha224.\"", token.STRING, 0)),
		"HmacSHA256":                reflect.ValueOf(constant.MakeFromLiteral("\"hmac-sha256.\"", token.STRING, 0)),
		"HmacSHA384":                reflect.ValueOf(constant.MakeFromLiteral("\"hmac-sha384.\"", token.STRING, 0)),
		"HmacSHA512":                reflect.ValueOf(constant.MakeFromLiteral("\"hmac-sha512.\"", token.STRING, 0)),
		"INDIRECT":                  reflect.ValueOf(dns.INDIRECT),
		"IPSECGatewayHost":          reflect.ValueOf(dns.IPSECGatewayHost),
		"IPSECGatewayIPv4":          reflect.ValueOf(dns.IPSECGatewayIPv4),
		"IPSECGatewayIPv6":          reflect.ValueOf(dns.IPSECGatewayIPv6),
		"IPSECGatewayNone":          reflect.ValueOf(dns.IPSECGatewayNone),
		"Id":                        reflect.ValueOf(&dns.Id).Elem(),
		"IsDomainName":              reflect.ValueOf(dns.IsDomainName),
		"IsDuplicate":               reflect.ValueOf(dns.IsDuplicate),
		"IsFqdn":                    reflect.ValueOf(dns.IsFqdn),
		"IsMsg":                     reflect.ValueOf(dns.IsMsg),
		"IsRRset":                   reflect.ValueOf(dns.IsRRset),
		"IsSubDomain":               reflect.ValueOf(dns.IsSubDomain),
		"LOC_ALTITUDEBASE":          reflect.ValueOf(constant.MakeFromLiteral("100000", token.INT, 0)),
		"LOC_DEGREES":               reflect.ValueOf(constant.MakeFromLiteral("3600000", token.INT, 0)),
		"LOC_EQUATOR":               reflect.ValueOf(constant.MakeFromLiteral("2147483648", token.INT, 0)),
		"LOC_HOURS":                 reflect.ValueOf(constant.MakeFromLiteral("60000", token.INT, 0)),
		"LOC_PRIMEMERIDIAN":         reflect.ValueOf(constant.MakeFromLiteral("2147483648", token.INT, 0)),
		"Len":                       reflect.ValueOf(dns.Len),
		"ListenAndServe":            reflect.ValueOf(dns.ListenAndServe),
		"ListenAndServeTLS":         reflect.ValueOf(dns.ListenAndServeTLS),
		"MaxMsgSize":                reflect.ValueOf(constant.MakeFromLiteral("65535", token.INT, 0)),
		"MinMsgSize":                reflect.ValueOf(constant.MakeFromLiteral("512", token.INT, 0)),
		"MsgAccept":                 reflect.ValueOf(dns.MsgAccept),
		"MsgIgnore":                 reflect.ValueOf(dns.MsgIgnore),
		"MsgReject":                 reflect.ValueOf(dns.MsgReject),
		"MsgRejectNotImplemented":   reflect.ValueOf(dns.MsgRejectNotImplemented),
		"NewRR":                     reflect.ValueOf(dns.NewRR),
		"NewServeMux":               reflect.ValueOf(dns.NewServeMux),
		"NewZoneParser":             reflect.ValueOf(dns.NewZoneParser),
		"NextLabel":                 reflect.ValueOf(dns.NextLabel),
		"NumField":                  reflect.ValueOf(dns.NumField),
		"OpcodeIQuery":              reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"OpcodeNotify":              reflect.ValueOf(constant.MakeFromLiteral("4", token.INT, 0)),
		"OpcodeQuery":               reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),
		"OpcodeStatus":              reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"OpcodeToString":            reflect.ValueOf(&dns.OpcodeToString).Elem(),
		"OpcodeUpdate":              reflect.ValueOf(constant.MakeFromLiteral("5", token.INT, 0)),
		"PRIVATEDNS":                reflect.ValueOf(dns.PRIVATEDNS),
		"PRIVATEOID":                reflect.ValueOf(dns.PRIVATEOID),
		"PackDomainName":            reflect.ValueOf(dns.PackDomainName),
		"PackRR":                    reflect.ValueOf(dns.PackRR),
		"PrevLabel":                 reflect.ValueOf(dns.PrevLabel),
		"PrivateHandle":             reflect.ValueOf(dns.PrivateHandle),
		"PrivateHandleRemove":       reflect.ValueOf(dns.PrivateHandleRemove),
		"REVOKE":                    reflect.ValueOf(constant.MakeFromLiteral("128", token.INT, 0)),
		"RSAMD5":                    reflect.ValueOf(dns.RSAMD5),
		"RSASHA1":                   reflect.ValueOf(dns.RSASHA1),
		"RSASHA1NSEC3SHA1":          reflect.ValueOf(dns.RSASHA1NSEC3SHA1),
		"RSASHA256":                 reflect.ValueOf(dns.RSASHA256),
		"RSASHA512":                 reflect.ValueOf(dns.RSASHA512),
		"RcodeBadAlg":               reflect.ValueOf(constant.MakeFromLiteral("21", token.INT, 0)),
		"RcodeBadCookie":            reflect.ValueOf(constant.MakeFromLiteral("23", token.INT, 0)),
		"RcodeBadKey":               reflect.ValueOf(constant.MakeFromLiteral("17", token.INT, 0)),
		"RcodeBadMode":              reflect.ValueOf(constant.MakeFromLiteral("19", token.INT, 0)),
		"RcodeBadName":              reflect.ValueOf(constant.MakeFromLiteral("20", token.INT, 0)),
		"RcodeBadSig":               reflect.ValueOf(constant.MakeFromLiteral("16", token.INT, 0)),
		"RcodeBadTime":              reflect.ValueOf(constant.MakeFromLiteral("18", token.INT, 0)),
		"RcodeBadTrunc":             reflect.ValueOf(constant.MakeFromLiteral("22", token.INT, 0)),
		"RcodeBadVers":              reflect.ValueOf(constant.MakeFromLiteral("16", token.INT, 0)),
		"RcodeFormatError":          reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"RcodeNXRrset":              reflect.ValueOf(constant.MakeFromLiteral("8", token.INT, 0)),
		"RcodeNameError":            reflect.ValueOf(constant.MakeFromLiteral("3", token.INT, 0)),
		"RcodeNotAuth":              reflect.ValueOf(constant.MakeFromLiteral("9", token.INT, 0)),
		"RcodeNotImplemented":       reflect.ValueOf(constant.MakeFromLiteral("4", token.INT, 0)),
		"RcodeNotZone":              reflect.ValueOf(constant.MakeFromLiteral("10", token.INT, 0)),
		"RcodeRefused":              reflect.ValueOf(constant.MakeFromLiteral("5", token.INT, 0)),
		"RcodeServerFailure":        reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"RcodeSuccess":              reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),
		"RcodeToString":             reflect.ValueOf(&dns.RcodeToString).Elem(),
		"RcodeYXDomain":             reflect.ValueOf(constant.MakeFromLiteral("6", token.INT, 0)),
		"RcodeYXRrset":              reflect.ValueOf(constant.MakeFromLiteral("7", token.INT, 0)),
		"ReadFromSessionUDP":        reflect.ValueOf(dns.ReadFromSessionUDP),
		"ReadRR":                    reflect.ValueOf(dns.ReadRR),
		"ReverseAddr":               reflect.ValueOf(dns.ReverseAddr),
		"SEP":                       reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"SHA1":                      reflect.ValueOf(dns.SHA1),
		"SHA256":                    reflect.ValueOf(dns.SHA256),
		"SHA384":                    reflect.ValueOf(dns.SHA384),
		"SHA512":                    reflect.ValueOf(dns.SHA512),
		"SMIMEAName":                reflect.ValueOf(dns.SMIMEAName),
		"SVCB_ALPN":                 reflect.ValueOf(dns.SVCB_ALPN),
		"SVCB_DOHPATH":              reflect.ValueOf(dns.SVCB_DOHPATH),
		"SVCB_ECHCONFIG":            reflect.ValueOf(dns.SVCB_ECHCONFIG),
		"SVCB_IPV4HINT":             reflect.ValueOf(dns.SVCB_IPV4HINT),
		"SVCB_IPV6HINT":             reflect.ValueOf(dns.SVCB_IPV6HINT),
		"SVCB_MANDATORY":            reflect.ValueOf(dns.SVCB_MANDATORY),
		"SVCB_NO_DEFAULT_ALPN":      reflect.ValueOf(dns.SVCB_NO_DEFAULT_ALPN),
		"SVCB_PORT":                 reflect.ValueOf(dns.SVCB_PORT),
		"Split":                     reflect.ValueOf(dns.Split),
		"SplitDomainName":           reflect.ValueOf(dns.SplitDomainName),
		"StringToAlgorithm":         reflect.ValueOf(&dns.StringToAlgorithm).Elem(),
		"StringToCertType":          reflect.ValueOf(&dns.StringToCertType).Elem(),
		"StringToClass":             reflect.ValueOf(&dns.StringToClass).Elem(),
		"StringToExtendedErrorCode": reflect.ValueOf(&dns.StringToExtendedErrorCode).Elem(),
		"StringToHash":              reflect.ValueOf(&dns.StringToHash).Elem(),
		"StringToOpcode":            reflect.ValueOf(&dns.StringToOpcode).Elem(),
		"StringToRcode":             reflect.ValueOf(&dns.StringToRcode).Elem(),
		"StringToTime":              reflect.ValueOf(dns.StringToTime),
		"StringToType":              reflect.ValueOf(&dns.StringToType).Elem(),
		"TLSAName":                  reflect.ValueOf(dns.TLSAName),
		"TimeToString":              reflect.ValueOf(dns.TimeToString),
		"TsigGenerate":              reflect.ValueOf(dns.TsigGenerate),
		"TsigGenerateWithProvider":  reflect.ValueOf(dns.TsigGenerateWithProvider),
		"TsigVerify":                reflect.ValueOf(dns.TsigVerify),
		"TsigVerifyWithProvider":    reflect.ValueOf(dns.TsigVerifyWithProvider),
		"TypeA":                     reflect.ValueOf(dns.TypeA),
		"TypeAAAA":                  reflect.ValueOf(dns.TypeAAAA),
		"TypeAFSDB":                 reflect.ValueOf(dns.TypeAFSDB),
		"TypeAMTRELAY":              reflect.ValueOf(dns.TypeAMTRELAY),
		"TypeANY":                   reflect.ValueOf(dns.TypeANY),
		"TypeAPL":                   reflect.ValueOf(dns.TypeAPL),
		"TypeATMA":                  reflect.ValueOf(dns.TypeATMA),
		"TypeAVC":                   reflect.ValueOf(dns.TypeAVC),
		"TypeAXFR":                  reflect.ValueOf(dns.TypeAXFR),
		"TypeCAA":                   reflect.ValueOf(dns.TypeCAA),
		"TypeCDNSKEY":               reflect.ValueOf(dns.TypeCDNSKEY),
		"TypeCDS":                   reflect.ValueOf(dns.TypeCDS),
		"TypeCERT":                  reflect.ValueOf(dns.TypeCERT),
		"TypeCNAME":                 reflect.ValueOf(dns.TypeCNAME),
		"TypeCSYNC":                 reflect.ValueOf(dns.TypeCSYNC),
		"TypeDHCID":                 reflect.ValueOf(dns.TypeDHCID),
		"TypeDLV":                   reflect.ValueOf(dns.TypeDLV),
		"TypeDNAME":                 reflect.ValueOf(dns.TypeDNAME),
		"TypeDNSKEY":                reflect.ValueOf(dns.TypeDNSKEY),
		"TypeDS":                    reflect.ValueOf(dns.TypeDS),
		"TypeEID":                   reflect.ValueOf(dns.TypeEID),
		"TypeEUI48":                 reflect.ValueOf(dns.TypeEUI48),
		"TypeEUI64":                 reflect.ValueOf(dns.TypeEUI64),
		"TypeGID":                   reflect.ValueOf(dns.TypeGID),
		"TypeGPOS":                  reflect.ValueOf(dns.TypeGPOS),
		"TypeHINFO":                 reflect.ValueOf(dns.TypeHINFO),
		"TypeHIP":                   reflect.ValueOf(dns.TypeHIP),
		"TypeHTTPS":                 reflect.ValueOf(dns.TypeHTTPS),
		"TypeIPSECKEY":              reflect.ValueOf(dns.TypeIPSECKEY),
		"TypeISDN":                  reflect.ValueOf(dns.TypeISDN),
		"TypeIXFR":                  reflect.ValueOf(dns.TypeIXFR),
		"TypeKEY":                   reflect.ValueOf(dns.TypeKEY),
		"TypeKX":                    reflect.ValueOf(dns.TypeKX),
		"TypeL32":                   reflect.ValueOf(dns.TypeL32),
		"TypeL64":                   reflect.ValueOf(dns.TypeL64),
		"TypeLOC":                   reflect.ValueOf(dns.TypeLOC),
		"TypeLP":                    reflect.ValueOf(dns.TypeLP),
		"TypeMAILA":                 reflect.ValueOf(dns.TypeMAILA),
		"TypeMAILB":                 reflect.ValueOf(dns.TypeMAILB),
		"TypeMB":                    reflect.ValueOf(dns.TypeMB),
		"TypeMD":                    reflect.ValueOf(dns.TypeMD),
		"TypeMF":                    reflect.ValueOf(dns.TypeMF),
		"TypeMG":                    reflect.ValueOf(dns.TypeMG),
		"TypeMINFO":                 reflect.ValueOf(dns.TypeMINFO),
		"TypeMR":                    reflect.ValueOf(dns.TypeMR),
		"TypeMX":                    reflect.ValueOf(dns.TypeMX),
		"TypeNAPTR":                 reflect.ValueOf(dns.TypeNAPTR),
		"TypeNID":                   reflect.ValueOf(dns.TypeNID),
		"TypeNIMLOC":                reflect.ValueOf(dns.TypeNIMLOC),
		"TypeNINFO":                 reflect.ValueOf(dns.TypeNINFO),
		"TypeNS":                    reflect.ValueOf(dns.TypeNS),
		"TypeNSAPPTR":               reflect.ValueOf(dns.TypeNSAPPTR),
		"TypeNSEC":                  reflect.ValueOf(dns.TypeNSEC),
		"TypeNSEC3":                 reflect.ValueOf(dns.TypeNSEC3),
		"TypeNSEC3PARAM":            reflect.ValueOf(dns.TypeNSEC3PARAM),
		"TypeNULL":                  reflect.ValueOf(dns.TypeNULL),
		"TypeNXT":                   reflect.ValueOf(dns.TypeNXT),
		"TypeNone":                  reflect.ValueOf(dns.TypeNone),
		"TypeOPENPGPKEY":            reflect.ValueOf(dns.TypeOPENPGPKEY),
		"TypeOPT":                   reflect.ValueOf(dns.TypeOPT),
		"TypePTR":                   reflect.ValueOf(dns.TypePTR),
		"TypePX":                    reflect.ValueOf(dns.TypePX),
		"TypeRKEY":                  reflect.ValueOf(dns.TypeRKEY),
		"TypeRP":                    reflect.ValueOf(dns.TypeRP),
		"TypeRRSIG":                 reflect.ValueOf(dns.TypeRRSIG),
		"TypeRT":                    reflect.ValueOf(dns.TypeRT),
		"TypeReserved":              reflect.ValueOf(dns.TypeReserved),
		"TypeSIG":                   reflect.ValueOf(dns.TypeSIG),
		"TypeSMIMEA":                reflect.ValueOf(dns.TypeSMIMEA),
		"TypeSOA":                   reflect.ValueOf(dns.TypeSOA),
		"TypeSPF":                   reflect.ValueOf(dns.TypeSPF),
		"TypeSRV":                   reflect.ValueOf(dns.TypeSRV),
		"TypeSSHFP":                 reflect.ValueOf(dns.TypeSSHFP),
		"TypeSVCB":                  reflect.ValueOf(dns.TypeSVCB),
		"TypeTA":                    reflect.ValueOf(dns.TypeTA),
		"TypeTALINK":                reflect.ValueOf(dns.TypeTALINK),
		"TypeTKEY":                  reflect.ValueOf(dns.TypeTKEY),
		"TypeTLSA":                  reflect.ValueOf(dns.TypeTLSA),
		"TypeTSIG":                  reflect.ValueOf(dns.TypeTSIG),
		"TypeTXT":                   reflect.ValueOf(dns.TypeTXT),
		"TypeToRR":                  reflect.ValueOf(&dns.TypeToRR).Elem(),
		"TypeToString":              reflect.ValueOf(&dns.TypeToString).Elem(),
		"TypeUID":                   reflect.ValueOf(dns.TypeUID),
		"TypeUINFO":                 reflect.ValueOf(dns.TypeUINFO),
		"TypeUNSPEC":                reflect.ValueOf(dns.TypeUNSPEC),
		"TypeURI":                   reflect.ValueOf(dns.TypeURI),
		"TypeX25":                   reflect.ValueOf(dns.TypeX25),
		"TypeZONEMD":                reflect.ValueOf(dns.TypeZONEMD),
		"UnpackDomainName":          reflect.ValueOf(dns.UnpackDomainName),
		"UnpackRR":                  reflect.ValueOf(dns.UnpackRR),
		"UnpackRRWithHeader":        reflect.ValueOf(dns.UnpackRRWithHeader),
		"Version":                   reflect.ValueOf(&dns.Version).Elem(),
		"WriteToSessionUDP":         reflect.ValueOf(dns.WriteToSessionUDP),
		"ZONE":                      reflect.ValueOf(constant.MakeFromLiteral("256", token.INT, 0)),
		"ZoneMDHashAlgSHA384":       reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"ZoneMDHashAlgSHA512":       reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"ZoneMDSchemeSimple":        reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),

		// type definitions
		"A":                   reflect.ValueOf((*dns.A)(nil)),
		"AAAA":                reflect.ValueOf((*dns.AAAA)(nil)),
		"AFSDB":               reflect.ValueOf((*dns.AFSDB)(nil)),
		"AMTRELAY":            reflect.ValueOf((*dns.AMTRELAY)(nil)),
		"ANY":                 reflect.ValueOf((*dns.ANY)(nil)),
		"APL":                 reflect.ValueOf((*dns.APL)(nil)),
		"APLPrefix":           reflect.ValueOf((*dns.APLPrefix)(nil)),
		"AVC":                 reflect.ValueOf((*dns.AVC)(nil)),
		"CAA":                 reflect.ValueOf((*dns.CAA)(nil)),
		"CDNSKEY":             reflect.ValueOf((*dns.CDNSKEY)(nil)),
		"CDS":                 reflect.ValueOf((*dns.CDS)(nil)),
		"CERT":                reflect.ValueOf((*dns.CERT)(nil)),
		"CNAME":               reflect.ValueOf((*dns.CNAME)(nil)),
		"CSYNC":               reflect.ValueOf((*dns.CSYNC)(nil)),
		"Class":               reflect.ValueOf((*dns.Class)(nil)),
		"Client":              reflect.ValueOf((*dns.Client)(nil)),
		"ClientConfig":        reflect.ValueOf((*dns.ClientConfig)(nil)),
		"Conn":                reflect.ValueOf((*dns.Conn)(nil)),
		"ConnectionStater":    reflect.ValueOf((*dns.ConnectionStater)(nil)),
		"DHCID":               reflect.ValueOf((*dns.DHCID)(nil)),
		"DLV":                 reflect.ValueOf((*dns.DLV)(nil)),
		"DNAME":               reflect.ValueOf((*dns.DNAME)(nil)),
		"DNSKEY":              reflect.ValueOf((*dns.DNSKEY)(nil)),
		"DS":                  reflect.ValueOf((*dns.DS)(nil)),
		"DecorateReader":      reflect.ValueOf((*dns.DecorateReader)(nil)),
		"DecorateWriter":      reflect.ValueOf((*dns.DecorateWriter)(nil)),
		"EDNS0":               reflect.ValueOf((*dns.EDNS0)(nil)),
		"EDNS0_COOKIE":        reflect.ValueOf((*dns.EDNS0_COOKIE)(nil)),
		"EDNS0_DAU":           reflect.ValueOf((*dns.EDNS0_DAU)(nil)),
		"EDNS0_DHU":           reflect.ValueOf((*dns.EDNS0_DHU)(nil)),
		"EDNS0_EDE":           reflect.ValueOf((*dns.EDNS0_EDE)(nil)),
		"EDNS0_ESU":           reflect.ValueOf((*dns.EDNS0_ESU)(nil)),
		"EDNS0_EXPIRE":        reflect.ValueOf((*dns.EDNS0_EXPIRE)(nil)),
		"EDNS0_LLQ":           reflect.ValueOf((*dns.EDNS0_LLQ)(nil)),
		"EDNS0_LOCAL":         reflect.ValueOf((*dns.EDNS0_LOCAL)(nil)),
		"EDNS0_N3U":           reflect.ValueOf((*dns.EDNS0_N3U)(nil)),
		"EDNS0_NSID":          reflect.ValueOf((*dns.EDNS0_NSID)(nil)),
		"EDNS0_PADDING":       reflect.ValueOf((*dns.EDNS0_PADDING)(nil)),
		"EDNS0_SUBNET":        reflect.ValueOf((*dns.EDNS0_SUBNET)(nil)),
		"EDNS0_TCP_KEEPALIVE": reflect.ValueOf((*dns.EDNS0_TCP_KEEPALIVE)(nil)),
		"EDNS0_UL":            reflect.ValueOf((*dns.EDNS0_UL)(nil)),
		"EID":                 reflect.ValueOf((*dns.EID)(nil)),
		"EUI48":               reflect.ValueOf((*dns.EUI48)(nil)),
		"EUI64":               reflect.ValueOf((*dns.EUI64)(nil)),
		"Envelope":            reflect.ValueOf((*dns.Envelope)(nil)),
		"Error":               reflect.ValueOf((*dns.Error)(nil)),
		"GID":                 reflect.ValueOf((*dns.GID)(nil)),
		"GPOS":                reflect.ValueOf((*dns.GPOS)(nil)),
		"HINFO":               reflect.ValueOf((*dns.HINFO)(nil)),
		"HIP":                 reflect.ValueOf((*dns.HIP)(nil)),
		"HTTPS":               reflect.ValueOf((*dns.HTTPS)(nil)),
		"Handler":             reflect.ValueOf((*dns.Handler)(nil)),
		"HandlerFunc":         reflect.ValueOf((*dns.HandlerFunc)(nil)),
		"Header":              reflect.ValueOf((*dns.Header)(nil)),
		"IPSECKEY":            reflect.ValueOf((*dns.IPSECKEY)(nil)),
		"ISDN":                reflect.ValueOf((*dns.ISDN)(nil)),
		"KEY":                 reflect.ValueOf((*dns.KEY)(nil)),
		"KX":                  reflect.ValueOf((*dns.KX)(nil)),
		"L32":                 reflect.ValueOf((*dns.L32)(nil)),
		"L64":                 reflect.ValueOf((*dns.L64)(nil)),
		"LOC":                 reflect.ValueOf((*dns.LOC)(nil)),
		"LP":                  reflect.ValueOf((*dns.LP)(nil)),
		"MB":                  reflect.ValueOf((*dns.MB)(nil)),
		"MD":                  reflect.ValueOf((*dns.MD)(nil)),
		"MF":                  reflect.ValueOf((*dns.MF)(nil)),
		"MG":                  reflect.ValueOf((*dns.MG)(nil)),
		"MINFO":               reflect.ValueOf((*dns.MINFO)(nil)),
		"MR":                  reflect.ValueOf((*dns.MR)(nil)),
		"MX":                  reflect.ValueOf((*dns.MX)(nil)),
		"Msg":                 reflect.ValueOf((*dns.Msg)(nil)),
		"MsgAcceptAction":     reflect.ValueOf((*dns.MsgAcceptAction)(nil)),
		"MsgAcceptFunc":       reflect.ValueOf((*dns.MsgAcceptFunc)(nil)),
		"MsgHdr":              reflect.ValueOf((*dns.MsgHdr)(nil)),
		"NAPTR":               reflect.ValueOf((*dns.NAPTR)(nil)),
		"NID":                 reflect.ValueOf((*dns.NID)(nil)),
		"NIMLOC":              reflect.ValueOf((*dns.NIMLOC)(nil)),
		"NINFO":               reflect.ValueOf((*dns.NINFO)(nil)),
		"NS":                  reflect.ValueOf((*dns.NS)(nil)),
		"NSAPPTR":             reflect.ValueOf((*dns.NSAPPTR)(nil)),
		"NSEC":                reflect.ValueOf((*dns.NSEC)(nil)),
		"NSEC3":               reflect.ValueOf((*dns.NSEC3)(nil)),
		"NSEC3PARAM":          reflect.ValueOf((*dns.NSEC3PARAM)(nil)),
		"NULL":                reflect.ValueOf((*dns.NULL)(nil)),
		"NXT":                 reflect.ValueOf((*dns.NXT)(nil)),
		"Name":                reflect.ValueOf((*dns.Name)(nil)),
		"OPENPGPKEY":          reflect.ValueOf((*dns.OPENPGPKEY)(nil)),
		"OPT":                 reflect.ValueOf((*dns.OPT)(nil)),
		"PTR":                 reflect.ValueOf((*dns.PTR)(nil)),
		"PX":                  reflect.ValueOf((*dns.PX)(nil)),
		"PacketConnReader":    reflect.ValueOf((*dns.PacketConnReader)(nil)),
		"ParseError":          reflect.ValueOf((*dns.ParseError)(nil)),
		"PrivateRR":           reflect.ValueOf((*dns.PrivateRR)(nil)),
		"PrivateRdata":        reflect.ValueOf((*dns.PrivateRdata)(nil)),
		"Question":            reflect.ValueOf((*dns.Question)(nil)),
		"RFC3597":             reflect.ValueOf((*dns.RFC3597)(nil)),
		"RKEY":                reflect.ValueOf((*dns.RKEY)(nil)),
		"RP":                  reflect.ValueOf((*dns.RP)(nil)),
		"RR":                  reflect.ValueOf((*dns.RR)(nil)),
		"RRSIG":               reflect.ValueOf((*dns.RRSIG)(nil)),
		"RR_Header":           reflect.ValueOf((*dns.RR_Header)(nil)),
		"RT":                  reflect.ValueOf((*dns.RT)(nil)),
		"Reader":              reflect.ValueOf((*dns.Reader)(nil)),
		"ResponseWriter":      reflect.ValueOf((*dns.ResponseWriter)(nil)),
		"SIG":                 reflect.ValueOf((*dns.SIG)(nil)),
		"SMIMEA":              reflect.ValueOf((*dns.SMIMEA)(nil)),
		"SOA":                 reflect.ValueOf((*dns.SOA)(nil)),
		"SPF":                 reflect.ValueOf((*dns.SPF)(nil)),
		"SRV":                 reflect.ValueOf((*dns.SRV)(nil)),
		"SSHFP":               reflect.ValueOf((*dns.SSHFP)(nil)),
		"SVCB":                reflect.ValueOf((*dns.SVCB)(nil)),
		"SVCBAlpn":            reflect.ValueOf((*dns.SVCBAlpn)(nil)),
		"SVCBDoHPath":         reflect.ValueOf((*dns.SVCBDoHPath)(nil)),
		"SVCBECHConfig":       reflect.ValueOf((*dns.SVCBECHConfig)(nil)),
		"SVCBIPv4Hint":        reflect.ValueOf((*dns.SVCBIPv4Hint)(nil)),
		"SVCBIPv6Hint":        reflect.ValueOf((*dns.SVCBIPv6Hint)(nil)),
		"SVCBKey":             reflect.ValueOf((*dns.SVCBKey)(nil)),
		"SVCBKeyValue":        reflect.ValueOf((*dns.SVCBKeyValue)(nil)),
		"SVCBLocal":           reflect.ValueOf((*dns.SVCBLocal)(nil)),
		"SVCBMandatory":       reflect.ValueOf((*dns.SVCBMandatory)(nil)),
		"SVCBNoDefaultAlpn":   reflect.ValueOf((*dns.SVCBNoDefaultAlpn)(nil)),
		"SVCBPort":            reflect.ValueOf((*dns.SVCBPort)(nil)),
		"ServeMux":            reflect.ValueOf((*dns.ServeMux)(nil)),
		"Server":              reflect.ValueOf((*dns.Server)(nil)),
		"SessionUDP":          reflect.ValueOf((*dns.SessionUDP)(nil)),
		"TA":                  reflect.ValueOf((*dns.TA)(nil)),
		"TALINK":              reflect.ValueOf((*dns.TALINK)(nil)),
		"TKEY":                reflect.ValueOf((*dns.TKEY)(nil)),
		"TLSA":                reflect.ValueOf((*dns.TLSA)(nil)),
		"TSIG":                reflect.ValueOf((*dns.TSIG)(nil)),
		"TXT":                 reflect.ValueOf((*dns.TXT)(nil)),
		"Transfer":            reflect.ValueOf((*dns.Transfer)(nil)),
		"TsigProvider":        reflect.ValueOf((*dns.TsigProvider)(nil)),
		"Type":                reflect.ValueOf((*dns.Type)(nil)),
		"UID":                 reflect.ValueOf((*dns.UID)(nil)),
		"UINFO":               reflect.ValueOf((*dns.UINFO)(nil)),
		"URI":                 reflect.ValueOf((*dns.URI)(nil)),
		"Writer":              reflect.ValueOf((*dns.Writer)(nil)),
		"X25":                 reflect.ValueOf((*dns.X25)(nil)),
		"ZONEMD":              reflect.ValueOf((*dns.ZONEMD)(nil)),
		"ZoneParser":          reflect.ValueOf((*dns.ZoneParser)(nil)),

		// interface wrapper definitions
		"_ConnectionStater": reflect.ValueOf((*_github_com_miekg_dns_ConnectionStater)(nil)),
		"_EDNS0":            reflect.ValueOf((*_github_com_miekg_dns_EDNS0)(nil)),
		"_Handler":          reflect.ValueOf((*_github_com_miekg_dns_Handler)(nil)),
		"_PacketConnReader": reflect.ValueOf((*_github_com_miekg_dns_PacketConnReader)(nil)),
		"_PrivateRdata":     reflect.ValueOf((*_github_com_miekg_dns_PrivateRdata)(nil)),
		"_RR":               reflect.ValueOf((*_github_com_miekg_dns_RR)(nil)),
		"_Reader":           reflect.ValueOf((*_github_com_miekg_dns_Reader)(nil)),
		"_ResponseWriter":   reflect.ValueOf((*_github_com_miekg_dns_ResponseWriter)(nil)),
		"_SVCBKeyValue":     reflect.ValueOf((*_github_com_miekg_dns_SVCBKeyValue)(nil)),
		"_TsigProvider":     reflect.ValueOf((*_github_com_miekg_dns_TsigProvider)(nil)),
		"_Writer":           reflect.ValueOf((*_github_com_miekg_dns_Writer)(nil)),
	}
}

// _github_com_miekg_dns_ConnectionStater is an interface wrapper for ConnectionStater type
type _github_com_miekg_dns_ConnectionStater struct {
	IValue           interface{}
	WConnectionState func() *tls.ConnectionState
}

func (W _github_com_miekg_dns_ConnectionStater) ConnectionState() *tls.ConnectionState {
	return W.WConnectionState()
}

// _github_com_miekg_dns_EDNS0 is an interface wrapper for EDNS0 type
type _github_com_miekg_dns_EDNS0 struct {
	IValue  interface{}
	WOption func() uint16
	WString func() string
}

func (W _github_com_miekg_dns_EDNS0) Option() uint16 {
	return W.WOption()
}
func (W _github_com_miekg_dns_EDNS0) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}

// _github_com_miekg_dns_Handler is an interface wrapper for Handler type
type _github_com_miekg_dns_Handler struct {
	IValue    interface{}
	WServeDNS func(w dns.ResponseWriter, r *dns.Msg)
}

func (W _github_com_miekg_dns_Handler) ServeDNS(w dns.ResponseWriter, r *dns.Msg) {
	W.WServeDNS(w, r)
}

// _github_com_miekg_dns_PacketConnReader is an interface wrapper for PacketConnReader type
type _github_com_miekg_dns_PacketConnReader struct {
	IValue          interface{}
	WReadPacketConn func(conn net.PacketConn, timeout time.Duration) ([]byte, net.Addr, error)
	WReadTCP        func(conn net.Conn, timeout time.Duration) ([]byte, error)
	WReadUDP        func(conn *net.UDPConn, timeout time.Duration) ([]byte, *dns.SessionUDP, error)
}

func (W _github_com_miekg_dns_PacketConnReader) ReadPacketConn(conn net.PacketConn, timeout time.Duration) ([]byte, net.Addr, error) {
	return W.WReadPacketConn(conn, timeout)
}
func (W _github_com_miekg_dns_PacketConnReader) ReadTCP(conn net.Conn, timeout time.Duration) ([]byte, error) {
	return W.WReadTCP(conn, timeout)
}
func (W _github_com_miekg_dns_PacketConnReader) ReadUDP(conn *net.UDPConn, timeout time.Duration) ([]byte, *dns.SessionUDP, error) {
	return W.WReadUDP(conn, timeout)
}

// _github_com_miekg_dns_PrivateRdata is an interface wrapper for PrivateRdata type
type _github_com_miekg_dns_PrivateRdata struct {
	IValue  interface{}
	WCopy   func(a0 dns.PrivateRdata) error
	WLen    func() int
	WPack   func(a0 []byte) (int, error)
	WParse  func(a0 []string) error
	WString func() string
	WUnpack func(a0 []byte) (int, error)
}

func (W _github_com_miekg_dns_PrivateRdata) Copy(a0 dns.PrivateRdata) error {
	return W.WCopy(a0)
}
func (W _github_com_miekg_dns_PrivateRdata) Len() int {
	return W.WLen()
}
func (W _github_com_miekg_dns_PrivateRdata) Pack(a0 []byte) (int, error) {
	return W.WPack(a0)
}
func (W _github_com_miekg_dns_PrivateRdata) Parse(a0 []string) error {
	return W.WParse(a0)
}
func (W _github_com_miekg_dns_PrivateRdata) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}
func (W _github_com_miekg_dns_PrivateRdata) Unpack(a0 []byte) (int, error) {
	return W.WUnpack(a0)
}

// _github_com_miekg_dns_RR is an interface wrapper for RR type
type _github_com_miekg_dns_RR struct {
	IValue  interface{}
	WHeader func() *dns.RR_Header
	WString func() string
}

func (W _github_com_miekg_dns_RR) Header() *dns.RR_Header {
	return W.WHeader()
}
func (W _github_com_miekg_dns_RR) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}

// _github_com_miekg_dns_Reader is an interface wrapper for Reader type
type _github_com_miekg_dns_Reader struct {
	IValue   interface{}
	WReadTCP func(conn net.Conn, timeout time.Duration) ([]byte, error)
	WReadUDP func(conn *net.UDPConn, timeout time.Duration) ([]byte, *dns.SessionUDP, error)
}

func (W _github_com_miekg_dns_Reader) ReadTCP(conn net.Conn, timeout time.Duration) ([]byte, error) {
	return W.WReadTCP(conn, timeout)
}
func (W _github_com_miekg_dns_Reader) ReadUDP(conn *net.UDPConn, timeout time.Duration) ([]byte, *dns.SessionUDP, error) {
	return W.WReadUDP(conn, timeout)
}

// _github_com_miekg_dns_ResponseWriter is an interface wrapper for ResponseWriter type
type _github_com_miekg_dns_ResponseWriter struct {
	IValue          interface{}
	WClose          func() error
	WHijack         func()
	WLocalAddr      func() net.Addr
	WRemoteAddr     func() net.Addr
	WTsigStatus     func() error
	WTsigTimersOnly func(a0 bool)
	WWrite          func(a0 []byte) (int, error)
	WWriteMsg       func(a0 *dns.Msg) error
}

func (W _github_com_miekg_dns_ResponseWriter) Close() error {
	return W.WClose()
}
func (W _github_com_miekg_dns_ResponseWriter) Hijack() {
	W.WHijack()
}
func (W _github_com_miekg_dns_ResponseWriter) LocalAddr() net.Addr {
	return W.WLocalAddr()
}
func (W _github_com_miekg_dns_ResponseWriter) RemoteAddr() net.Addr {
	return W.WRemoteAddr()
}
func (W _github_com_miekg_dns_ResponseWriter) TsigStatus() error {
	return W.WTsigStatus()
}
func (W _github_com_miekg_dns_ResponseWriter) TsigTimersOnly(a0 bool) {
	W.WTsigTimersOnly(a0)
}
func (W _github_com_miekg_dns_ResponseWriter) Write(a0 []byte) (int, error) {
	return W.WWrite(a0)
}
func (W _github_com_miekg_dns_ResponseWriter) WriteMsg(a0 *dns.Msg) error {
	return W.WWriteMsg(a0)
}

// _github_com_miekg_dns_SVCBKeyValue is an interface wrapper for SVCBKeyValue type
type _github_com_miekg_dns_SVCBKeyValue struct {
	IValue  interface{}
	WKey    func() dns.SVCBKey
	WString func() string
}

func (W _github_com_miekg_dns_SVCBKeyValue) Key() dns.SVCBKey {
	return W.WKey()
}
func (W _github_com_miekg_dns_SVCBKeyValue) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}

// _github_com_miekg_dns_TsigProvider is an interface wrapper for TsigProvider type
type _github_com_miekg_dns_TsigProvider struct {
	IValue    interface{}
	WGenerate func(msg []byte, t *dns.TSIG) ([]byte, error)
	WVerify   func(msg []byte, t *dns.TSIG) error
}

func (W _github_com_miekg_dns_TsigProvider) Generate(msg []byte, t *dns.TSIG) ([]byte, error) {
	return W.WGenerate(msg, t)
}
func (W _github_com_miekg_dns_TsigProvider) Verify(msg []byte, t *dns.TSIG) error {
	return W.WVerify(msg, t)
}

// _github_com_miekg_dns_Writer is an interface wrapper for Writer type
type _github_com_miekg_dns_Writer struct {
	IValue interface{}
	WWrite func(p []byte) (n int, err error)
}

func (W _github_com_miekg_dns_Writer) Write(p []byte) (n int, err error) {
	return W.WWrite(p)
}
